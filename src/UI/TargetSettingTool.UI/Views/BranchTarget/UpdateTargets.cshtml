@{
    ViewData["Title"] = "UpdateTarget";
}

<div class='container-fulid m-3'>
    <div class="row">
        <div class='col-sm-8'>
            <h3>Update Targets</h3>
        </div>
    </div>
    <hr />
</div>

<section>
    <div>
        <form>
            <div class="form-group mt-3">
                <label class="control-label">Branch</label>
                <select class="form-select" id="BranchId" required>
                    <option data-default-option value="">Select a option</option>
                </select>
                <span id="error-ParameterType" class="text-danger"></span>
            </div>
            <div class="form-group mt-3">
                <label class="control-label">Date</label>
                <select class="form-select" id="StartDate" required disabled>
                    <option data-default-option value="">Select a option</option>
                </select>
                <span id="error-ParameterType" class="text-danger"></span>
            </div>
        </form>
    </div>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Sr No</th>
                    <th>Parameter Name</th>
                    <th>Target Amount</th>
                    <th>Acheived Target Amount</th>
                </tr>
            </thead>
            <tbody id="BranchTargets">
                @* @for (var i = 0; i < Model.Count; i++)
                    {
                    <tr>
                    <td>@Html.DisplayFor(item => i)</td>
                    <td>@Html.DisplayFor(item => model.Parameter.Name)</td>
                    <td>@Html.DisplayFor(item => model.UserParamerter.TargetAmount)</td>
                    <td>@Html.DisplayFor(item => model.AchievedTargetAmount)</td>
                    </tr>
                    } *@
            </tbody>

        </table>
    </div>
</section>


@section Scripts {
@{
await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script src="~/js/branchTargetUpdate.js" defer></script>
}
